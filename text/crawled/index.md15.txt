
layout: api
title: API | Refunds
heading: Refunds
desc:  Initiate normal and instant refunds to your customers using Razorpay's Refund APIs. View and update refund using APIs.
index: true

You can make full or partial refunds to customers. While issuing refunds, you can choose to process:
Normal Refunds (refund within 5-7 working days, no additional charges)
Instant Refunds (instant refunds, nominal additional charges)

Know more about Refunds.

Refunds Can be Made Only on Captured Payments

You can initiate refunds only on those payments that are in captured state. A payment in authorized state is auto-refunded if not captured within 5 days of creation.

You can try out our APIs on the Razorpay Postman Public Workspace.

Run in Postman

Use Cases

Create a normal refund to build customer trust by seamlessly managing their expectations.
Create an instant refund to provide a better user experience for them.
Retrieve information about all refunds.
Retrieve details for a specific refund using the unique identifier linked to the refund.

Refund Entity

The Refund entity has the following fields:

id
: string The unique identifier of the refund. For example, rfnd_FgRAHdNOM4ZVbO.

entity
: string Indicates the type of entity. Here, it is refund.

amount
: integer The amount to be refunded (in the smallest unit of currency).  For example, refund in INR, a value of 100 means 100 paise (equivalent to ₹1).

currency
: string The currency of payment amount for which the refund is initiated. Check the list of supported currencies.

payment_id
: string The unique identifier of the payment for which a refund is initiated. For example, pay_FgR9UMzgmKDJRi.

speed
: string Speed at which the refund is to be processed. Possible values:
  normal: Indicates that the refund will be processed via the normal speed. The refund will take 5-7 working days.
  optimum: Indicates that the refund will be processed at an optimal speed based on Razorpay's internal fund transfer logic.
    If the refund can be processed instantly, Razorpay will do so, irrespective of the payment method used to make the payment.
    If an instant refund is not possible, Razorpay will initiate a refund that is processed at the normal speed. For example, in case of payments made using debit cards, netbanking or unsupported credit cards.

created_at
: integer Unix timestamp at which the refund was created. For example, 1600856650.

batch_id
: string This parameter is populated if the refund was created as part of a batch upload. For example, batch_00000000000001

notes
: json object Key-value store for storing your reference data. A maximum of 15 key-value pairs can be included. For example, "note_key": "Beam me up Scotty”.

receipt
: string A unique identifier provided by you for your internal reference.

acquirer_data
: array A dynamic array consisting of a unique reference number (either RRN, ARN or UTR) that is provided by the banking partner when a refund is processed. This reference number can be used by the customer to track the status of the refund with the bank.

status
: string Indicates the state of the refund. Possible values:
  pending: This state indicates that Razorpay is attempting to process the refund.
  processed: This is the final state of the refund.
  failed: A refund can attain the failed state in the following scenarios:
    Normal refund is not possible for a payment which is more than 6 months old.
    Instant Refund can sometimes fail because of customer's account or bank-related issues.

speed_requested
: string The processing mode of the refund seen in the refund response.  This attribute is seen in the refund response only if the speed parameter is set in the refund request.Possible values:
  normal: Indicates that the refund will be processed via the normal speed. The refund will take 5-7 working days.
  optimum: Indicates that the refund will be processed at an optimal speed based on Razorpay's internal fund transfer logic.
    If the refund can be processed instantly, Razorpay will do so, irrespective of the payment method used to make the payment.
    If an instant refund is not possible, Razorpay will initiate a refund that is processed at the normal speed.

speed_processed
: string This is a parameter in the response which describes the mode used to process a refund.  This attribute is seen in the refund response only if the speed parameter is set in the refund request. Possible values:
  instant: Indicates that the refund has been processed instantly via fund transfer.
  normal: Indicates that the refund has been processed by the payment processing partner. The refund will take 5-7 working days.

You can create and manage refunds using APIs or from the Razorpay Dashboard.

{
  "id": "rfnd_FgRAHdNOM4ZVbO",
  "entity": "refund",
  "amount": 10000,
  "currency": "INR",
  "paymentid": "payFgR9UMzgmKDJRi",
  "notes": {
    "noteskey1": "Beam me up Scotty.",
    "noteskey2": "Engage"
  },
  "receipt": null,
  "acquirer_data": {
    "arn": "10000000000000"
  },
  "created_at": 1600856650,
  "batch_id": null,
  "status": "processed",
  "speed_processed": "normal",
  "speed_requested": "normal"
}

Create a Normal Refund

The following endpoint creates a normal refund for a payment.

/payments/:id/refund

curl -u [YOURKEYID]:[YOURKEYSECRET] \
-X POST https://api.razorpay.com/v1/payments/pay_29QQoUBi66xm2f/refund \
-H 'Content-Type: application/json' \
-d '{
  "amount": 500100
}'

RazorpayClient razorpay = new RazorpayClient("[YOURKEYID]", "[YOURKEYSECRET]");

String paymentId = "pay_29QQoUBi66xm2f";

JSONObject refundRequest = new JSONObject();
refundRequest.put("amount",100);
refundRequest.put("speed","normal");
JSONObject notes = new JSONObject();
notes.put("noteskey1","Tea, Earl Grey, Hot");
notes.put("noteskey2","Tea, Earl Grey… decaf.");
refundRequest.put("notes",notes);
refundRequest.put("receipt","Receipt No. #31");

Payment payment = razorpay.payments.refund(paymentId,refundRequest);

$api = new Api($key_id, $secret);

$api->payment->fetch($paymentId)->refund(array("amount"=> "100", "speed"=>"normal", "notes"=>array("noteskey1"=>"Beam me up Scotty.", "noteskey2"=>"Engage"), "receipt"=>"Receipt No. 31"));

import razorpay
client = razorpay.Client(auth=("YOURID", "YOURSECRET"))

client.payment.refund(paymentId,{
  "amount": "100",
  "speed": "normal",
  "notes": {
    "noteskey1": "Beam me up Scotty.",
    "noteskey2": "Engage"
  },
  "receipt": "Receipt No. 31"
})

import ( razorpay "github.com/razorpay/razorpay-go" )
client := razorpay.NewClient("YOURKEYID", "YOUR_SECRET")

data := map[string]interface{}{
  "speed": "normal",
  "notes": map[string]interface{}{
    "key_1": "value1",
    "key_2": "value2",
  },
}
body, err := client.Payment.Refund("",1200, data, nil)

var instance = new Razorpay({ keyid: 'YOURKEYID', keysecret: 'YOUR_SECRET' })

instance.payments.refund(paymentId,{
  "amount": "100",
  "speed": "normal",
  "notes": {
    "noteskey1": "Beam me up Scotty.",
    "noteskey2": "Engage"
  },
  "receipt": "Receipt No. 31"
})

//initialize the SDK client
RazorpayClient client = new RazorpayClient("", "");

// payment to be refunded, payment must be a captured payment
Payment payment = client.Payment.Fetch(paymentId);

//Full Refund
Refund refund = payment.Refund();

//Partial Refund
Dictionary data = new Dictionary();
data.Add("amount", "500100");
Refund refund = payment.Refund(data);

require "razorpay"
Razorpay.setup('YOURKEYID', 'YOUR_SECRET')

paymentId = "pay_29QQoUBi66xm2f"

para_attr = {
  "amount": "100",
  "speed": "normal",
  "notes": {
    "noteskey1": "Beam me up Scotty.",
    "noteskey2": "Engage"
  },
  "receipt": "Receipt No. 31"
}

Razorpay::Payment.fetch(paymentId).refund(para_attr)

{
  "id": "rfnd_FP8QHiV938haTz",
  "entity": "refund",
  "amount": 500100,
  "receipt": "Receipt No. 31",
  "currency": "INR",
  "paymentid": "pay29QQoUBi66xm2f",
  "notes": []
  "receipt": null,
  "acquirer_data": {
    "arn": null
  },
  "created_at": 1597078866,
  "batch_id": null,
  "status": "processed",
  "speed_processed": "normal",
  "speed_requested": "normal"
}
{
    "error": {
        "code": "BADREQUESTERROR",
        "description": "The amount must be atleast INR 1.00",
        "source": "business",
        "step": "payment_initiation",
        "reason": "inputvalidationfailed",
        "metadata": {},
        "field": "amount"
    }
}

Path Parameter

id mandatory
: string The unique identifier of the payment which needs to be refunded.

Request Parameters

amount optional
: integer The amount to be refunded. Amount should be in the smallest unit of the currency in which the payment was made.
  For a partial refund, enter a value lesser than the payment amount. For example, if the payment amount is ₹1500 and you want to refund only ₹500, you must pass 50000.
  For full refund, enter the entire payment amount. If the amount parameter is not passed, the entire payment amount will be refunded.

speed optional
: string The speed at which the refund is to be processed. The default value is normal. Refund will be processed via the normal speed, and the customer will receive the refund within 5-7 working days.

notes optional
: json object Key-value pairs used to store additional information. A maximum of 15 key-value pairs can be included.

receipt optional
: string A unique identifier provided by you for your internal reference.

Response Parameters

Descriptions for the response parameters are present in the Refunds Entity parameters table.

Error Response Parameters

Given below is a list of possible errors you may face while creating a normal refund.

Error | Cause | Solution

The API \{key/secret\} provided is invalid. | The API credentials passed in the API call differ from the ones generated on the Dashboard. | The API keys must be active and entered correctly with no whitespace before or after.

\{Paymentid\} is not a valid id. | The paymentid provided is invalid. | Use a valid payment_id.

The requested URL was not found on the server. | The URL is wrong or is missing something.A POST API is executed by GET method. | Ensure that the URL is correct and complete.Use the correct method, that is, POST.

\{any Extra field\} is/are not required and should not be sent | An additional or unrequired parameter is passed.	| Ensure that you only pass the required parameters in the request body.

The refund amount provided is greater than amount captured. | The refund amount entered is more than the amount captured. | Enter an amount equal to or less than the amount captured.

The amount must be atleast INR 1.00 | The refund amount entered is less than ₹1. | Enter an amount of at least ₹1.

The payment has been fully refunded already | The paymentid has already been refunded fully. | Use a paymentid that has not been fully refunded.

Create an Instant Refund

If you want to process refunds instantaneously to your customers, you can do so by passing the speed with value as optimum in the request body.

/payments/:id/refund

curl -u [YOURKEYID]:[YOURKEYSECRET] \
-X POST https://api.razorpay.com/v1/payments/pay_29QQoUBi66xm2f/refund \
-H 'Content-Type: application/json' \
-d '{
  "amount": 500100,
  "speed": "optimum",
  "receipt": "Receipt No. 31",
}'

RazorpayClient razorpay = new RazorpayClient("[YOURKEYID]", "[YOURKEYSECRET]");

String paymentId = "pay_29QQoUBi66xm2f";

JSONObject refundRequest = new JSONObject();
refundRequest.put("amount",100);
refundRequest.put("speed","optimum");
refundRequest.put("receipt","Receipt No. #31");

Payment payment = razorpay.payments.refund(paymentId,refundRequest);

$api = new Api($key_id, $secret);

$api->payment->fetch($paymentId)->refund(array("amount"=> "100","speed"=>"optimum","receipt"=>"Receipt No. 31"));

import razorpay
client = razorpay.Client(auth=("YOURID", "YOURSECRET"))

client.payment.refund(paymentId,{
  "amount": "100",
  "speed": "optimum",
  "receipt": "Receipt No. 31"
})

import ( razorpay "github.com/razorpay/razorpay-go" )
client := razorpay.NewClient("YOURKEYID", "YOUR_SECRET")

data := map[string]interface{}{
	"speed": "optimum",
	"receipt": "Receipt No. #12",
}
body, err := client.Payment.Refund("",100, data, nil)

require "razorpay"
Razorpay.setup('YOURKEYID', 'YOUR_SECRET')

paymentId = "pay_29QQoUBi66xm2f"

para_attr = {
  "amount": "100",
  "speed": "optimum",
  "receipt": "Receipt No. 31"
}
Razorpay::Payment.fetch(paymentId).refund(para_attr)

var instance = new Razorpay({ keyid: 'YOURKEYID', keysecret: 'YOUR_SECRET' })

instance.payments.refund(paymentId,{
  "amount": "100",
  "speed": "optimum",
  "receipt": "Receipt No. 31"
})

{
  "id": "rfnd_FP8R8EGjGbPkVb",
  "entity": "refund",
  "amount": 500100,
  "currency": "INR",
  "paymentid": "pay29QQoUBi66xm2f",
  "notes": {
    "noteskey1": "Tea, Earl Grey, Hot",
    "noteskey2": "Tea, Earl Grey… decaf."
  },
  "receipt": "Receipt No. 31",
  "acquirer_data": {
    "arn": null
  },
  "created_at": 1597078914,
  "batch_id": null,
  "status": "processed",
  "speed_processed": "normal",
  "speed_requested": "optimum"
}
{
    "error": {
        "code": "BADREQUESTERROR",
        "description": "iajoiosjdajsd is not a valid id",
        "source": "business",
        "step": "payment_initiation",
        "reason": "inputvalidationfailed",
        "metadata": {}
    }
}

Refunds will be processed at an optimal speed based on Razorpay's internal fund transfer logic. If the refund can be processed instantly, Razorpay will do so irrespective of the payment method used to make the payment. If an Instant Refund is not possible, Razorpay will initiate a refund that is processed at the normal speed.

Know more about Instant Refunds.

Path Parameter

id mandatory
: string The unique identifier of the payment which needs to be refunded.

Request Parameters

amount optional
: integer The amount to be refunded. Amount should be in the smallest unit of the currency in which the payment was made. Required in case of partial refund.
  For a partial refund, enter a value lesser than the payment amount. For example, if the payment amount is ₹1200 and you want to refund only ₹200, you must pass 20000.
  For full refund, enter the entire payment amount. If amount parameter is not passed, the entire payment amount will be refunded.

speed mandatory
: string Here, it must be optimum. Indicates that the refund will be processed at an optimal speed based on Razorpay's internal fund transfer logic.
    If the refund can be processed instantly, Razorpay will do so, irrespective of the payment method used to make the payment.
    If an instant refund is not possible, Razorpay will initiate a refund that is processed at the normal speed.

receipt optional
: string A unique identifier provided by you for your internal reference.

Response Parameters

Descriptions for the response parameters are present in the Refunds Entity parameters table.

Error Response Parameters

Given below is a list of possible errors you may face while creating an instant refund.

Error | Cause | Solution

The API \{key/secret\} provided is invalid. | The API credentials passed in the API call differ from the ones generated on the Dashboard. | The API keys must be active and entered correctly with no whitespace before or after.

\{Paymentid\} is not a valid id. | The paymentid provided is invalid. | Use a valid payment_id.

The requested URL was not found on the server. | The URL is wrong or is missing something.A POST API is executed by GET method. | Ensure that the URL is correct and complete.Use the correct method, that is, POST.

\{any Extra field\} is/are not required and should not be sent | An additional or unrequired parameter is passed.	| Ensure that you only pass the required parameters in the request body.

The refund amount provided is greater than amount captured. | The refund amount entered is more than the amount captured. | Enter an amount equal to or less than the amount captured.

The amount must be atleast INR 1.00 | The refund amount entered is less than ₹1. | Enter an amount of at least ₹1.

The payment has been fully refunded already | The paymentid has already been refunded fully. | Use a paymentid that has not been fully refunded.

Examples

In this example, the request body is same while the responses differ. The possible combinations of speed in the request and response are listed below.

speed attribute in Request | speed_processed attribute in Response | Description

normal | normal | Refund processed via normal speed.

optimum | normal | A faster speed was not available, so processed via normal speed.

optimum | instant | A faster speed was available and the refund was processed immediately.

Handy Tips

Once the Refund moves to the processed state, the refund response displays the speed_processed parameter, the final state of the refund.

{
  "id": "rfnd_CeZJghSAhhLwrd",
  "entity": "refund",
  "amount": 100,
  "currency": "INR",
  "paymentid": "payCeYgivxMLqdrKM",
  "notes": [],
  "receipt": null,
  "acquirer_data": {
    "arn": null
  },
  "created_at": 1559837417,
  "status": "processed",
  "speed_processed": "instant",
  "speed_requested": "optimum"
}
{
  "id": "rfnd_CeZJghSAhhLwrd",
  "entity": "refund",
  "amount": 100,
  "currency": "INR",
  "paymentid": "payCeYgivxMLqdrKM",
  "notes": [],
  "receipt": null,
  "acquirer_data": {
    "arn": null
  },
  "created_at": 1559837417,
  "status": "processed",
  "speed_processed": "normal",
  "speed_requested": "optimum"
}

Fetch Multiple Refunds for a Payment

The following endpoint retrieves multiple refunds for a payment. By default, only the last 10 refunds are returned. You can use count and skip parameters to change that behavior.

/payments/:id/refunds

curl -u [YOURKEYID]:[YOURKEYSECRET] \
-X GET https://api.razorpay.com/v1/payments/pay_29QQoUBi66xm2f/refunds?from=1500826740&to=1500826760

RazorpayClient razorpay = new RazorpayClient("[YOURKEYID]", "[YOURKEYSECRET]");

String paymentId = "pay_29QQoUBi66xm2f";

JSONObject params = new JSONObject();
params.put("count","1");

List payments = razorpay.payments.fetchAllRefunds(paymentId,params);

$api = new Api($key_id, $secret);

$api->payment->fetch($paymentId)->fetchMultipleRefund($option);

import razorpay
client = razorpay.Client(auth=("YOURID", "YOURSECRET"))

client.payment.fetchmultiplerefund(paymentId,option)

import ( razorpay "github.com/razorpay/razorpay-go" )
client := razorpay.NewClient("YOURKEYID", "YOUR_SECRET")

option := map[string]interface{}{
    "count" : 1,
}
body, err := client.Payment.FetchMultipleRefund("",option, nil)

require "razorpay"
Razorpay.setup('YOURKEYID', 'YOUR_SECRET')

paymentId = "pay_29QQoUBi66xm2f"

option = {"count":1}

Razorpay::Payment.fetchmultiplerefund(paymentId,option)

var instance = new Razorpay({ keyid: 'YOURKEYID', keysecret: 'YOUR_SECRET' })

instance.payments.fetchMultipleRefund(paymentId,option)

{
  "entity": "collection",
  "count": 2,
  "items": [
    {
      "id": "rfnd_FP8DDKxqJif6ca",
      "entity": "refund",
      "amount": 300100,
      "currency": "INR",
      "paymentid": "payFIKOnlyii5QGNx",
      "notes": {
        "comment": "Comment for refund"
      },
      "receipt": null,
      "acquirer_data": {
        "arn": "10000000000000"
      },
      "created_at": 1597078124,
      "batch_id": null,
      "status": "processed",
      "speed_processed": "normal",
      "speed_requested": "optimum"
    },
    {
      "id": "rfnd_FP8DRfu3ygfOaC",
      "entity": "refund",
      "amount": 200000,
      "currency": "INR",
      "paymentid": "payFIKOnlyii5QGNx",
      "notes": {
        "comment": "Comment for refund"
      },
      "receipt": null,
      "acquirer_data": {
        "arn": "10000000000000"
      },
      "created_at": 1597078137,
      "batch_id": null,
      "status": "processed",
      "speed_processed": "normal",
      "speed_requested": "optimum"
    }
  ]
}

{
    "error": {
        "code": "BADREQUESTERROR",
        "description": "The id provided does not exist",
        "source": "business",
        "step": "payment_initiation",
        "reason": "inputvalidationfailed",
        "metadata": {}
    }
}

Path Parameter

id mandatory
: string Unique identifier of the payment for which refund has been requested.

Query Parameters

from optional
: integer Unix timestamp at which the refunds were created.

to optional
: integer Unix timestamp till which the refunds were created.

count optional
:  integer The number of refunds to fetch for the payment.

skip optional
: integer The number of refunds to be skipped for the payment.

Response Parameters

Descriptions for the response parameters are present in the Refunds Entity parameters table.

Error Response Parameters

Given below is a list of possible errors you may face while fetching multiple refunds for a payment.

Error | Cause | Solution

The API \{key/secret\} provided is invalid. | The API credentials passed in the API call differ from the ones generated on the Dashboard. | The API keys must be active and entered correctly with no whitespace before or after.

The requested URL was not found on the server. | A GET API is executed by POST method.The URL is wrong or is missing something.There is an extra space in the URL. | Use the correct method, that is, GET.Ensure that the URL is correct, complete, and without any extra spaces.

id is not a valid id | The paymentid entered is invalid or incomplete. | Use a valid payment_id.

The id provided does not exist | The paymentid is not entered. | Use a valid paymentid.

Fetch a Specific Refund for a Payment

The following endpoint retrieves details of a specific refund made for a payment.

/payments/:paymentid/refunds/:refundid

curl -u [YOURKEYID]:[YOURKEYSECRET] \
-X GET https://api.razorpay.com/v1/payments/pay29QQoUBi66xm2f/refunds/rfndAABBdHIieexn5c

RazorpayClient razorpay = new RazorpayClient("[YOURKEYID]", "[YOURKEYSECRET]");

String paymentId = "pay_29QQoUBi66xm2f";

String refundId = "rfnd_AABBdHIieexn5c";

Payment payment = razorpay.payments.fetchRefund(paymentId,refundId);

$api = new Api($key_id, $secret);

$api->payment->fetch($paymentId)->fetchRefund($refundId);

import razorpay
client = razorpay.Client(auth=("YOURID", "YOURSECRET"))

client.payment.fetchrefundid(paymentId,refundId)

import ( razorpay "github.com/razorpay/razorpay-go" )
client := razorpay.NewClient("YOURKEYID", "YOUR_SECRET")

body, err := client.Payment.FetchRefund("","", nil, nil)

require "razorpay"
Razorpay.setup('YOURKEYID', 'YOUR_SECRET')

paymentId = "pay_29QQoUBi66xm2f"

refundId = "rfnd_AABBdHIieexn5c"

Razorpay::Payment.fetch(paymentId).fetch_refund(refundId)

var instance = new Razorpay({ keyid: 'YOURKEYID', keysecret: 'YOUR_SECRET' })

instance.payments.fetchRefund('payJTVtDcN1uRYb5n','rfndJTvPLzbhq92ZWD')
  "notes": {
    "noteskey1": "Beam me up Scotty.",
    "noteskey2": "Engage"
  }
})
RazorpayClient client = new RazorpayClient("", "");
Payment payment = client.Payment.Fetch(paymentId);

Refund refund = payment.Refunds.Fetch(refundId);

}

{
  "id": "rfnd_FP8DDKxqJif6ca",
  "entity": "refund",
  "amount": 300100,
  "currency": "INR",
  "paymentid": "payFIKOnlyii5QGNx",
  "notes": {
    "comment": "Comment for refund"
  },
  "receipt": null,
  "acquirer_data": {
    "arn": "10000000000000"
  },
  "created_at": 1597078124,
  "batch_id": null,
  "status": "processed",
  "speed_processed": "normal",
  "speed_requested": "optimum"
}

{
    "error": {
        "code": "BADREQUESTERROR",
        "description": "AABBdHIieex is not a valid id",
        "source": "business",
        "step": "payment_initiation",
        "reason": "inputvalidationfailed",
        "metadata": {}
    }
}

Path Parameters

paymentid mandatory_
: string Unique identifier of the payment for which the refund has been made.

refundid mandatory_
: string Unique identifier of the refund to be retrieved.

Response Parameters

Descriptions for the response parameters are present in the Refunds Entity parameters table.

Error Response Parameters

Given below is a list of possible errors you may face while fetching a specific refund for a payment.

Error | Cause | Solution

The API \{key/secret\} provided is invalid. | The API credentials passed in the API call differ from the ones generated on the Dashboard. | The API keys must be active and entered correctly with no whitespace before or after.

The requested URL was not found on the server. | The URL is wrong or is missing something.A GET API is executed by POST method. | Ensure that the URL is correct and complete.Use the correct method, that is, GET.

_id is not a valid id | The refund or payment id entered is invalid or incomplete.There is an extra space in the URL. | Use valid refund and payment ids without any spaces.

The id provided does not exist | The refund id entered is incomplete or invalid. | Use a complete and valid refund id.

Fetch All Refunds

The following endpoint retrieves details of all refunds. However, by default, only the last 10 refunds are returned. You can use count and skip query parameters to change that behavior.

/refunds/

curl -u [YOURKEYID]:[YOURKEYSECRET] \
-X GET https://api.razorpay.com/v1/refunds

RazorpayClient razorpay = new RazorpayClient("[YOURKEYID]", "[YOURKEYSECRET]");

JSONObject params = new JSONObject();
params.put("count","1");

List refund = razorpay.refunds.fetchAll(params);

$api = new Api($key_id, $secret);

$api->refund->all($options);

import razorpay
client = razorpay.Client(auth=("YOURID", "YOURSECRET"))

client.refund.all(options)

import ( razorpay "github.com/razorpay/razorpay-go" )
client := razorpay.NewClient("YOURKEYID", "YOUR_SECRET")

option := map[string]interface{}{
    "count" : 2
}
body, err := client.Payment.All(option, nil)

var instance = new Razorpay({ keyid: 'YOURKEYID', keysecret: 'YOUR_SECRET' })

instance.refunds.all(options)

require "razorpay"
Razorpay.setup('YOURKEYID', 'YOUR_SECRET')

options = {"count":1}

Razorpay::Refund.all(options)

{
  "entity": "collection",
  "count": 2,
  "items": [
    {
      "id": "rfnd_FFX6AnnIN3puqW",
      "entity": "refund",
      "amount": 88800,
      "currency": "INR",
      "paymentid": "payFFX5FdEYx8jPwA",
      "notes": {
        "comment": "Issuing an instant refund"
      },
      "receipt": null,
      "acquirer_data": {},
      "created_at": 1594982363,
      "batch_id": null,
      "status": "processed",
      "speed_processed": "optimum",
      "speed_requested": "optimum"
    },
    {
      "id": "rfnd_EqWThTE7dd7utf",
      "entity": "refund",
      "amount": 6000,
      "currency": "INR",
      "paymentid": "payEpkFDYRirena0f",
      "notes": {
        "comment": "Issuing a normal refund"
      },
      "receipt": null,
      "acquirer_data": {
        "arn": "10000000000000"
      },
      "created_at": 1589521675,
      "batch_id": null,
      "status": "processed",
      "speed_processed": "normal",
      "speed_requested": "normal"
    }
  ]
}
{
    "error": {
        "code": "BADREQUESTERROR",
        "description": "The payment id field is required.",
        "source": "business",
        "step": "payment_initiation",
        "reason": "inputvalidationfailed",
        "metadata": {},
        "field": "payment_id"
    }
}

Query Parameters

from optional
: integer Unix timestamp at which the refunds were created.

to optional
: integer Unix timestamp till which the refunds were created.

count optional
: integer The number of refunds to fetch. You can fetch a maximum of 100 refunds.

skip optional
: integer The number of refunds to be skipped.

Response Parameters

Descriptions for the response parameters are present in the Refunds Entity parameters table.

Error Response Parameters

Given below is a list of possible errors you may face while fetching all refunds.

Error | Cause | Solution

The API \{key/secret\} provided is invalid. | The API credentials passed in the API call differ from the ones generated on the Dashboard. | The API keys must be active and entered correctly with no whitespace before or after.

The requested URL was not found on the server. | The URL is wrong or is missing something. | Ensure that the URL is correct and complete.

The payment id field is required. | A GET API is executed by POST method.	| Use the correct method, that is, GET.

Fetch Refund by ID

The following endpoint retrieves the refund using the ID.

/refunds/:id

curl -u [YOURKEYID]:[YOURKEYSECRET] \

-X GET https://api.razorpay.com/v1/refunds/rfnd_DfjjhJC6eDvUAi

RazorpayClient razorpay = new RazorpayClient("[YOURKEYID]", "[YOURKEYSECRET]");

String refundId = "rfnd_DfjjhJC6eDvUAi";

List refund = razorpay.refunds.fetch(refundId);

$api = new Api($key_id, $secret);

$api->refund->fetch($refundId);

import razorpay
client = razorpay.Client(auth=("YOURID", "YOURSECRET"))

client.refund.fetch(refundId)

require "razorpay"
Razorpay.setup('YOURKEYID', 'YOUR_SECRET')

refundId = "rfnd_DfjjhJC6eDvUAi"

Razorpay::Refund.fetch(refundId)

import ( razorpay "github.com/razorpay/razorpay-go" )
client := razorpay.NewClient("YOURKEYID", "YOUR_SECRET")

body, err := client.Refund.Fetch("", nil, nil)

var instance = new Razorpay({ keyid: 'YOURKEYID', keysecret: 'YOUR_SECRET' })

instance.refunds.fetch(refundId)

{
  "id": "rfnd_DfjjhJC6eDvUAi",
  "entity": "refund",
  "amount": 6000,
  "currency": "INR",
  "paymentid": "payEpkFDYRirena0f",
  "notes": {
    "comment": "Issuing an instant refund"
  },
  "receipt": null,
  "acquirer_data": {
    "arn": "10000000000000"
  },
  "created_at": 1589521675,
  "batch_id": null,
  "status": "processed",
  "speed_processed": "optimum",
  "speed_requested": "optimum"
}

{
    "error": {
        "code": "BADREQUESTERROR",
        "description": "The requested URL was not found on the server.",
        "source": "NA",
        "step": "NA",
        "reason": "NA",
        "metadata": {}
    }
}

Path Parameter

id mandatory
: string Unique identifier of the refund which is to be retrieved.

Response Parameters

Descriptions for the response parameters are present in the Refunds Entity parameters table.

Error Response Parameters

Given below is a list of possible errors you may face while fetching a refund by id.

Error | Cause | Solution

The API \{key/secret\} provided is invalid. | The API credentials passed in the API call differ from the ones generated on the Dashboard. | The API keys must be active and entered correctly with no whitespace before or after.

The requested URL was not found on the server. | The URL is wrong or is missing something.A GET API is executed by POST method. | Ensure that the URL is correct and complete.Use the correct method, that is, GET.

_id is not a valid id | The refund id entered is invalid. | Use a valid refund id.

The id provided does not exist | The refund id entered is incomplete or invalid. | Use a complete and valid refund id.

Update Refund

You can modify an existing refund to update the notes field only.
Notes can be used to record additional information about the payment.
You can add up to 15 key-value pairs with each value of the key not exceeding 256 characters.

Using the PATCH operation, you can replace the entire notes object for the entity.

The following endpoint updates the notes parameter for a refund.

/refunds/:id/

curl -u [YOURKEYID]:[YOURKEYSECRET] \
-X PATCH https://api.razorpay.com/v1/refunds/rfnd_DfjjhJC6eDvUAi \
-H 'Content-Type: application/json' \
-d '{
    "notes": {
      "noteskey1":"Beam me up Scotty.",
      "noteskey2":"Engage"
    }
}'

RazorpayClient razorpay = new RazorpayClient("[YOURKEYID]", "[YOURKEYSECRET]");

String refundId = "rfnd_DfjjhJC6eDvUAi";

JSONObject refundRequest = new JSONObject();
JSONObject notes = new JSONObject();
notes.put("noteskey1","Tea, Earl Grey, Hot");
notes.put("noteskey2","Tea, Earl Grey… decaf.");
refundRequest.put("notes",notes);

Refund refund = razorpay.refunds.edit(refundId,refundRequest);

$api = new Api($key_id, $secret);

$api->refund->fetch($refundId)->edit(array('notes'=> array('noteskey1'=>'Beam me up Scotty.', 'noteskey2'=>'Engage')));

import razorpay
client = razorpay.Client(auth=("YOURID", "YOURSECRET"))

client.refund.edit(refundId,{
  "notes": {
    "noteskey1": "Beam me up Scotty.",
    "noteskey2": "Engage"
  }
})

import ( razorpay "github.com/razorpay/razorpay-go" )
client := razorpay.NewClient("YOURKEYID", "YOUR_SECRET")

data:= map[string]interface{}{
  "notes": map[string]interface{}{
    "noteskey1":"Beam me up Scotty.",
    "noteskey2":"Engage",
  },
}

body, err := client.Refund.Update("", data, nil)

var instance = new Razorpay({ keyid: 'YOURKEYID', keysecret: 'YOUR_SECRET' })

instance.refunds.edit(refundId,{
  "notes": {
    "noteskey1": "Beam me up Scotty.",
    "noteskey2": "Engage"
  }
})

require "razorpay"
Razorpay.setup('YOURKEYID', 'YOUR_SECRET')

refundId = "rfnd_DfjjhJC6eDvUAi"

para_attr = {
  "notes": {
    "noteskey1": "Beam me up Scotty.",
    "noteskey2": "Engage"
  }
}

Razorpay::Refund.fetch(refundId).edit(para_attr)

{
  "id": "rfnd_DfjjhJC6eDvUAi",
  "entity": "refund",
  "amount": 300100,
  "currency": "INR",
  "paymentid": "payFIKOnlyii5QGNx",
  "notes": {
    "noteskey1": "Beam me up Scotty.",
    "noteskey2": "Engage"
  },
  "receipt": null,
  "acquirer_data": {
    "arn": "10000000000000"
  },
  "created_at": 1597078124,
  "batch_id": null,
  "status": "processed",
  "speed_processed": "normal",
  "speed_requested": "optimum"
}

{
    "error": {
        "code": "BADREQUESTERROR",
        "description": "{rfnd_id} is not a valid id",
        "source": "business",
        "step": "payment_initiation",
        "reason": "inputvalidationfailed",
        "metadata": {}
    }
}

Path Parameter

id mandatory
: string Unique identifier of the refund for which the Notes field should be updated.

Request Parameter

notes mandatory
: json object Additional information to be modified or added as part of Notes field in key-pair format. Know more about notes.

Response Parameters

Descriptions for the response parameters are present in the Refunds Entity parameters table.

Error Response Parameters

Given below is a list of possible errors you may face while updating a refund.

Error | Cause | Solution

The API \{key/secret\} provided is invalid. | The API credentials passed in the API call differ from the ones generated on the Dashboard. | The API keys must be active and entered correctly with no whitespace before or after.

The requested URL was not found on the server. | A PATCH API is executed by POST method.The URL is wrong or is missing something.The refund id is not entered. | Use the correct method, that is, PATCH.Ensure that the URL is correct and complete.Use a valid refund id.

\{rfnd_id\} is not a valid id | The refund id entered is invalid or incomplete. | Use a valid and complete refund id.

The notes field is required | The request body does not include the notes parameter. | Ensure you enter the notes parameter in the request body.

Webhooks

Set up Razorpay Webhooks to configure and receive notifications when a specific event occurs. When one of these events is triggered, we send an HTTP POST payload in JSON to the webhook's configured URL.
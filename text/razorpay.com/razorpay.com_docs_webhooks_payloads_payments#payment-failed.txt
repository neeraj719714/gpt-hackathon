





Payments - Sample Payload | Razorpay DocsPricingAPI ReferenceSupportLog InSign UpHomeGet StartedPaymentsBanking PlusPartnersDeveloper ToolsAPI Reference GuideErrorsWebhooksWebhooksSet Up and Edit WebhooksBest PracticesValidate and Test WebhooksSample PayloadOrdersPaymentsRefundsDisputesInvoicesSubscriptionsPartnersRouteSmart CollectPayment LinksRazorpayXFAQsWebhooksPayloadsPaymentsPayments - Sample PayloadSample payload for PaymentsOrders and payments go hand-in-hand. Once a payment is captured, the order is marked paid.  This is reflected in the order.paid and payment.captured webhook events as well. These events are triggered when the payment associated with the order is captured.
Comparison - payment.captured vs order.paid
payment.captured Webhook Eventorder.paid Webhook EventYou do not have to integrate with the Orders API to trigger this event.You must integrate with the Orders API and pass the order_id parameter in Checkout to trigger this event.This payload contains the payment entity. Hence, only payment details are available.This payload contains the payment and order entities. Thus, order and payment information are available in the same payload.
Payments
The table below lists the Webhook events available for payments.
Webhook EventDescriptionpayment.authorizedTriggered when a payment is authorised.payment.capturedTriggered when a payment is successfully captured.payment.failedTriggered when a payment fails.
Handy Tips
The payload for a Webhook is a snapshot of the entity when the event occurred.
For example, when a customer makes a payment, its status changes to authorized. It can then immediately move to the captured state.
The payment can be in the captured state when the payment.authorized Webhook is fired. However, the payload for the payment.authorized event contains details of the events when the payment was authorised, not when it was captured.
In case of network tokenised cards, the last 4 digits will be of the tokenised card and not the actual card.

Payment Authorized
NetbankingCardWalletsUPIcopy{  "entity": "event",  "account_id": "acc_BFQ7uQEaa7j2z7",  "event": "payment.authorized",  "contains": [    "payment"  ],  "payload": {    "payment": {      "entity": {        "id": "pay_DESlfW9H8K9uqM",        "entity": "payment",        "amount": 100,        "currency": "INR",        "status": "authorized",        "order_id": "order_DESlLckIVRkHWj",        "invoice_id": null,        "international": false,        "method": "netbanking",        "amount_refunded": 0,        "refund_status": null,        "captured": false,        "description": null,        "card_id": null,        "bank": "HDFC",        "wallet": null,        "vpa": null,        "email": "gaurav.kumar@example.com",        "contact": "+919876543210",        "notes": [],        "fee": null,        "tax": null,        "error_code": null,        "error_description": null,        "error_source": null,        "error_step": null,        "error_reason": null,        "acquirer_data": {          "bank_transaction_id": "0125836177"        },        "created_at": 1567674599      }    }  },  "created_at": 1567674606}
Payment Captured
NetbankingCardWalletsUPIcopy{  "entity": "event",  "account_id": "acc_BFQ7uQEaa7j2z7",  "event": "payment.captured",  "contains": [    "payment"  ],  "payload": {    "payment": {      "entity": {        "id": "pay_DESlfW9H8K9uqM",        "entity": "payment",        "amount": 100,        "currency": "INR",        "base_amount": 100,        "status": "captured",        "order_id": "order_DESlLckIVRkHWj",        "invoice_id": null,        "international": false,        "method": "netbanking",        "amount_refunded": 0,        "amount_transferred": 0,        "refund_status": null,        "captured": true,        "description": null,        "card_id": null,        "bank": "HDFC",        "wallet": null,        "vpa": null,        "email": "gaurav.kumar@example.com",        "contact": "+919876543210",        "notes": [],        "fee": 2,        "tax": 0,        "error_code": null,        "error_description": null,        "error_source": null,        "error_step": null,        "error_reason": null,        "acquirer_data": {          "bank_transaction_id": "0125836177"        },        "created_at": 1567674599      }    }  },  "created_at": 1567674606}
Payment Failed
NetbankingCardWalletsUPIcopy{  "entity": "event",  "account_id": "acc_BFQ7uQEaa7j2z7",  "event": "payment.failed",  "contains": [    "payment"  ],  "payload": {    "payment": {      "entity": {        "id": "pay_DEAU825sJlCbGa",        "entity": "payment",        "amount": 50000,        "currency": "INR",        "status": "failed",        "order_id": "order_DEATVTRRctwEGb",        "invoice_id": null,        "international": false,        "method": "netbanking",        "amount_refunded": 0,        "refund_status": null,        "captured": false,        "description": null,        "card_id": null,        "bank": "HDFC",        "wallet": null,        "vpa": null,        "email": "gaurav.kumar@example.com",        "contact": "+919876543210",        "notes": [],        "fee": null,        "tax": null,        "error_code": "BAD_REQUEST_ERROR",        "error_description": "Payment failed",        "error_source": "bank",        "error_step": "payment_authorization",        "error_reason": "payment_failed",        "acquirer_data": {          "bank_transaction_id": null        },        "created_at": 1567610214      }    }  },  "created_at": 1567610215}
Watch Out!
Do not hardcode the vpa parameter in the integration. If a UPI Intent payment fails, the vpa parameter may not get displayed at times.
The webhook sequence is not fixed in the JSON payload for payment events.

Watch Out!If you have changed your webhook secret, remember to use the old secret for webhook signature validation while retrying older requests. Using the new secret will lead to signature mismatch.
Do Not Parse or Cast the Webhook Request BodyWhile generating a signature at your end, ensure that the webhook body is passed as an argument in the raw webhook request body. Do not parse or cast the webhook request body.
Payments Downtime
The table below lists the webhook events available for payments downtime.
Webhook EventDescriptionpayment.downtime.startedTriggered at the beginning of the downtime.payment.downtime.resolvedTriggered when a downtime is resolved.payment.downtime.updatedTriggered when a downtime is updated.
Payment Downtime Started
NetbankingCard - IssuerCard - NetworkUPI - VPA HandleUPI - PSPcopy{  "entity": "event",  "account_id": "acc_CWX291oykl9aZA",  "event": "payment.downtime.started",  "contains": [    "payment.downtime"  ],  "payload": {    "payment.downtime": {      "entity": {        "id": "down_F1Zppa6lcVheSE",        "entity": "payment.downtime",        "method": "netbanking",        "begin": 1591935238,        "end": null,        "status": "started",        "scheduled": false,        "severity": "high",        "instrument": {          "bank": "VIJB"        },        "instrument_schema": ["bank"],        "created_at": 1591935238,        "updated_at": 1591935238      }    }  },  "created_at": 1591935238}
Payment Downtime Resolved
NetbankingCard - IssuerCard - NetworkUPI - VPA HandleUPI - PSPcopy{  "entity": "event",  "account_id": "acc_DjF2cSbjtnqhJ5",  "event": "payment.downtime.resolved",  "contains": [    "payment.downtime"  ],  "payload": {    "payment.downtime": {      "entity": {        "id": "down_ENCWhh1lon7Hpp",        "entity": "payment.downtime",        "method": "netbanking",        "begin": 1583119550,        "end": 1583119551,        "status": "resolved",        "scheduled": false,        "severity": "medium",        "instrument": {          "bank": "COSB"        },        "instrument_schema": ["bank"],        "created_at": 1583119551,        "updated_at": 1591948663      }    }  },  "created_at": 1591948663}
Payment Downtime Updated
NetbankingCard - NetworkCard - IssuerUPI - VPA HandleUPI - PSPcopy{  "entity": "event",  "account_id": "acc_CWX291oykl9aZA",  "event": "payment.downtime.updated",  "contains": [    "payment.downtime"  ],  "payload": {    "payment.downtime": {      "entity": {        "id": "down_F1Zppa6lcVheSE",        "entity": "payment.downtime",        "method": "netbanking",        "begin": 1591935238,        "end": null,        "status": "updated",        "scheduled": false,        "severity": "high",        "instrument": {          "bank": "VIJB"        },        "instrument_schema": ["bank"],        "created_at": 1591935238,        "updated_at": 1591935238      }    }  },  "created_at": 1591935238}
SUBSCRIBE TO DEVELOPER UPDATESSubscribeAPI Reference GuideIntegrationsSupportON THIS PAGEComparison - payment.captured vs order.paidPaymentsPayment AuthorizedPayment CapturedPayment FailedPayments DowntimePayment Downtime StartedPayment Downtime ResolvedPayment Downtime Updated